(function() {
    'use strict';

	angular.module('app', ['ui.router']);

	/*@ngInject*/
	angular.module('app').config(["$stateProvider", "$urlRouterProvider", "$locationProvider", function($stateProvider, $urlRouterProvider, $locationProvider) {

		var main = {
			name: 'main',
			url: '/',
			templateUrl: 'app/main/main-template.html',
			controller: 'mainController',
			controllerAs: 'main'
		};

		var addBook = {
			name: 'addBook',
            url: '/addBook',
			templateUrl: 'app/book-add/book-add-template.html',
			controller: 'bookAddController',
			controllerAs: 'addBook'
		};

        // use the HTML5 History API
        $locationProvider.html5Mode(true);

		$stateProvider.state(main); 
		$stateProvider.state(addBook);

		$urlRouterProvider.otherwise('/');

	}]);

})();;/**
 * @ngdoc function
 * @name app.controller : bookAddControlle
 * @description
 * # controller
 */

(function() { 
  'use strict';

  /*@ngInject*/
  BookAddController.$inject = ["bookService", "$log", "$q"];
  function BookAddController(bookService, $log, $q) {
    var vm    = this;

    var init = {

      initAll: function() {
        $log.info('bookAddController :: init.initAll')
      }

    };

    init.initAll();

  }

  angular.module('app').controller('bookAddController', BookAddController);

})();;/* bookCard */

var bookCardSettings = {
    bindings: {
        title: '<',
        author: '<',
        category: '<'
    },
    templateUrl: 'app/book-list/book-card-template.html',
    controller: function() {
        var self = this;

        this.title      = this.title || '-';
        this.author     = this.author || '-';
        this.category   = this.category || '-';
    }
};

angular.module('app').component('bookCard', bookCardSettings);;/* bookList*/

var bookCardSettings = {
    bindings: {},
    templateUrl: 'app/book-list/book-list-template.html',
    controller: function($log, $q, bookService) {
        var self = this;

        self.books = [];

        this.init = {
            initAll: function() {
                self.restData.getBooks().then(function(data) {
                    self.books = data.data;
                });
            }
        };

        this.restData = {

            getBooks: function() {
                var defered = $q.defer();  
                var promise = defered.promise;

                bookService.getBooks().then(function(data) {
                    defered.resolve(data);
                }, function(err) {
                    $log.error('error getBooks', err);
                    defered.reject(err);
                });

                return promise;
            }
        };

        this.$onInit = function() {
            this.init.initAll();
        };

    }
};

angular.module('app').component('bookList', bookCardSettings);;(function() {
  'use strict';

	angular.module('app').factory('config', Config);

  /* @ngInject */
  function Config() { 

    var module  = {};
    var self    = module;

    var urlBase = '';
    var suffix  = '';

    module.config  = {
      'environment': 'test',
      'lang': 'en_En' 
    };

     module.restOptions = {
      'type': 'application/json',
      'headers': [{
        'key': 'GS-AUTH-TOKEN',
        'value': 'pending'
      }],
      'showPreload': true,
      'errorInterceptor': true
    };

    module.templatePaths = {
        base: ''
    };

    if ( self.config.environment === 'test' ) {
        self.templatePaths.base = './src/';
    } 

    if ( self.config.environment === 'develop' || self.config.environment === 'test' ) {
      urlBase = './mocks/';
      suffix  = '.json';
    }

    module.urls = {};

    module.urls.books = urlBase + 'books' + suffix;

    module.getConfig = function() {
      return self.config;
    };

    module.getRest = function() {
      return self.urls;
    };

    return {
      getConfig: module.getConfig,
      getRest: module.getRest
    }
  }

})();;;/* header.directive.js */

 /* @ngInject */
angular.module('app').directive('mainHeader', ["$state", function($state) {
    return {
        restrict: 'E',
        replace: false,
        scope: {
            title: '@'
        },
        templateUrl: 'app/header/main-header-template.html',
        link:  function(scope, element, attrs) {
            scope.title = scope.title || '';
            scope.goMain = function() {
              $state.go('main');
            }
        }
    }
}]);;/**
 * @ngdoc function
 * @name app.controller : mainController
 * @description
 * # controller main view
 */

(function() { 
  'use strict';

  /*@ngInject*/
  MainController.$inject = ["$log", "$q", "$state", "config", "bookService"];
  function MainController($log, $q, $state, config, bookService) {
    var vm    = this;

    vm.books = [];

    vm.actions = {
        addBook: function() {
            $state.go('addBook');
        }
    };

    vm.init = {       

        initAll: function() {
            $log.info('mainController :: init');
            this.setInitialData();
        },

        setInitialData: function() {
            vm.title = 'programming books';            
        }

    };


    vm.init.initAll();    

  }

  angular.module('app').controller('mainController', MainController);

})();;(function() {
  'use strict';

  BookService.$inject = ["$http", "$q", "config"];
	angular.module('app').factory('bookService', BookService);

  /* @ngInject */ 
  function BookService($http, $q, config) {
    var urlBooks = config.getRest().books;
    var books = {};
    
    books.allBooks = 'pending';

    books.getBooks = function() {
        var defered = $q.defer();  
        var promise = defered.promise; 

        if ( books.allBooks === 'pending' ) {
            $http({
                method: 'GET',
                url: urlBooks
                }).then(function successCallback(response) {
                    books.allBooks = response.data;
                    defered.resolve(response.data);                    
                }, function errorCallback(response) {
                    // todo interceptor
                    // defered.reject(err)
                });
        } else {
            defered.resolve(books.allBooks);
        }
        return promise;
    };

    return books;
  }

})();
//# sourceMappingURL=main.min.js.map
